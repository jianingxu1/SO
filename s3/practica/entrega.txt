PREGUNTA 18.
Un proceso puede saber el PID de su hijo guardando el valor que retorna el
fork() que crea el proceso hijo. Un proceso puede saber su propio PID con la
llamada getpid(), incluyendo la librería "unistd.h".

------------

PREGUNTA 19.
En caso de que el exclp falle.

------------

PREGUNTA 20.
Los directorios: attr, fd, map_files, ns, task, cwd, fdinfo, net, root.
La opcion "ls -d */".

------------

PREGUNTA 21.
CONTENIDO DEL STATUS:
Name:   myPS
Umask:  0022
State:  R (running)
Tgid:   8807
Ngid:   0
Pid:    8807
PPid:   8247
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    1000    1000    1000    1000
FDSize: 256
Groups: 24 25 27 29 30 44 46 109 113 116 1000 
NStgid: 8807
NSpid:  8807
NSpgid: 8807
NSsid:  8247
VmPeak:     1856 kB
VmSize:     1776 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:       388 kB
VmRSS:       388 kB
RssAnon:              64 kB
RssFile:             324 kB
RssShmem:              0 kB
VmData:       44 kB
VmStk:       132 kB
VmExe:         4 kB
VmLib:      1508 kB
VmPTE:        36 kB
VmSwap:        0 kB
HugetlbPages:          0 kB
CoreDumping:    0
Threads:        1
SigQ:   0/3535
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000000000000
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: 0000003fffffffff
CapAmb: 0000000000000000
NoNewPrivs:     0
Seccomp:        0
Speculation_Store_Bypass:       unknown
Cpus_allowed:   f
Cpus_allowed_list:      0-3
Mems_allowed:   1
Mems_allowed_list:      0
voluntary_ctxt_switches:        1
nonvoluntary_ctxt_switches:     86

CONTENIDO DEL CMDLINE: (xxd cmdline)
00000000: 2e2f 6d79 5053 0072 6f6f 7400            ./myPS.root.

ENV VS ENVIRON:
env => PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
env => /proc/8807

environ => PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
environ => PWD=/home/debian/Documents/sesion03

Los PATH son los mismos, sin embargo, los PWD son diferentes. En environ se
indica el path al ejecutable del proceso, mientras que en env se indica el path
actual de la sesion del terminal, que ahora esta localizada en el pcb del
proceso.

ESTADO DEL PROCESO:
State:  R (running)

El tiempo de CPU consumido en modo usuario es de 176546 (Parametro 14 del stat).

------------

PREGUNTA 22.
Supongo que CWD, seria current working directory, y apuntaria al directorio
donde se sitúa el proceso, y EXE, seria executable, y apuntaria al directorio
donde se sitúa el ejecutable del proceso.

------------

PREGUNTA 23.
No podemos, ya que el proceso hijo se encuentra en estado ZOMBIE.

------------

PREGUNTA 24.
CWD:
lrwxrwxrwx   1 debian debian 0 Oct  9 04:32 cwd -> /home/debian/Documents/
sesion03

EXE:
lrwxrwxrwx   1 debian debian 0 Oct  9 04:32 exe -> /home/debian/Documents/
sesion03/myPS_v0

Como dicho anteriormente, CWD, seria current working directory, y apuntaria al
directorio donde se sitúa el proceso, y EXE, seria executable, y apuntaria al
directorio donde se sitúa el ejecutable del proceso.

En esta versión, podemos ver los contenidos de los ficheros. Porque en este
caso, el proceso hijo NO está zombie, sino que está en estado running.

------------

PREGUNTA 25.
Sí que los puedo mostrar. Se encuentra en estado Running. La diferencia es el
estado del proceso, en el anterior, estaba en estado zombie y en este, en estado
running. Se debe a que myPS mutaba el proceso hijo a un ejecutable y luego hacía
un exit, en cambio en myPS_v0, el proceso hijo no muta sino que va a un while
loop infinito, por lo tanto, nunca acaba.


PREGUNTA 26.
Está en estado State:  S (sleeping).

PREGUNTA 27.
./myPS3 root username hello bye >>s.txt
He utilizado el >> para añadir/pegar al fichero s.txt la salida de myPS3.